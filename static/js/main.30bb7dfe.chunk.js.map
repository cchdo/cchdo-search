{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["L","Icon","Default","prototype","_getIconUrl","mergeOptions","iconRetinaUrl","require","iconUrl","shadowUrl","position","lat","lng","data","cruise","map","value","expocode","App","props","handleSearch","event","text","target","ma","RegExp","results","filter","test","setState","searchText","state","this","key","href","Container","fluid","Row","style","minHeight","Col","Map","height","center","zoom","TileLayer","url","attribution","Marker","Popup","lg","maxHeight","overflow","Form","Control","type","onChange","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kkuFAcOA,IAAEC,KAAKC,QAAQC,UAAUC,YAEhCJ,IAAEC,KAAKC,QAAQG,aAAa,CAC1BC,cAAeC,EAAQ,IACvBC,QAASD,EAAQ,IACjBE,UAAWF,EAAQ,MAIrB,IAAMG,EAAW,CAAEC,IAAK,EAAGC,IAAK,GAI1BC,EAAOC,EAAOC,KAAI,SAACC,GAAD,OAAWA,EAAMC,YAkD1BC,E,YA/Cb,WAAYC,GAAa,IAAD,8BACtB,4CAAMA,KAQRC,aAAe,SAACC,GACd,IAAMC,EAAOD,EAAME,OAAOP,MACpBQ,EAAKC,OAAOH,EAAM,KAClBI,EAAUb,EAAKc,QAAO,SAACX,GAAD,OAAYQ,EAAGI,KAAKZ,MAChD,EAAKa,SAAS,CAACC,WAAYR,EAAMI,QAASA,KAV1C,EAAKK,MAAQ,CACXD,WAAY,GACZJ,QAASb,GALW,E,sEAiBtB,IAAIa,EAAUM,KAAKD,MAAML,QAAQX,KAAI,SAACC,GAAD,OAAW,wBAAIiB,IAAKjB,GAAO,uBAAGkB,KAAI,wCAAmClB,IAAUA,OACpH,OACE,kBAACmB,EAAA,EAAD,CAAWC,OAAO,GAChB,kBAACC,EAAA,EAAD,CAAKC,MAAO,CAAEC,UAAW,UACvB,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAKH,MAAO,CAAEI,OAAQ,QAAUC,OAAQjC,EAAUkC,KAAM,GACtD,kBAACC,EAAA,EAAD,CACEC,IAAI,qDACJC,YAAY,2EAEd,kBAACC,EAAA,EAAD,CAAQtC,SAAUA,GAChB,kBAACuC,EAAA,EAAD,4BAA2B,6BAA3B,2BAIN,kBAACT,EAAA,EAAD,CAAKU,GAAI,EAAGZ,MAAO,CAACa,UAAW,QAASC,SAAS,WAC/C,qDACA,kBAACC,EAAA,EAAD,KACE,kBAACA,EAAA,EAAKC,QAAN,CAAcC,KAAK,SAASC,SAAUxB,KAAKZ,aAAcJ,MAAOgB,KAAKD,MAAMD,cAE7E,4BACGJ,U,GAvCG+B,IAAMC,WCjBJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDqI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.30bb7dfe.chunk.js","sourcesContent":["import React, { ChangeEvent } from 'react';\n\nimport { Container, Row, Col, Form } from 'react-bootstrap';\nimport { Map, Marker, Popup, TileLayer } from 'react-leaflet'\n\nimport cruise from './cruises.json'\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'leaflet/dist/leaflet.css';\n\nimport L from 'leaflet';\n\n// This next part is a hack to make icons work in CRA... TS isn't happy about it so just ignore this\n// @ts-ignore\ndelete L.Icon.Default.prototype._getIconUrl;\n\nL.Icon.Default.mergeOptions({\n  iconRetinaUrl: require('leaflet/dist/images/marker-icon-2x.png'),\n  iconUrl: require('leaflet/dist/images/marker-icon.png'),\n  shadowUrl: require('leaflet/dist/images/marker-shadow.png')\n});\n// End Hack\n\nconst position = { lat: 0, lng: 0 };\n\ntype AppState = {searchText: string, results:string[]}\n\nconst data = cruise.map((value) => value.expocode)\n\nclass App extends React.Component<{}, AppState> {\n  constructor(props: any) {\n    super(props);\n\n    this.state = {\n      searchText: \"\",\n      results: data\n    }\n  }\n\n  handleSearch = (event: ChangeEvent<HTMLInputElement>) => {\n    const text = event.target.value;\n    const ma = RegExp(text, 'i')\n    const results = data.filter((value) =>  ma.test(value))\n    this.setState({searchText: text, results: results})\n  }\n\n  render() {\n    let results = this.state.results.map((value) => <li key={value}><a href={`https://cchdo.ucsd.edu/cruise/${value}`}>{value}</a></li>)\n    return (\n      <Container fluid={true}>\n        <Row style={{ minHeight: \"100vh\" }}>\n          <Col>\n            <Map style={{ height: \"100%\" }} center={position} zoom={2}>\n              <TileLayer\n                url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n                attribution=\"&copy; <a href=&quot;http://osm.org/copyright&quot;>OpenStreetMap</a> contributors\"\n              />\n              <Marker position={position}>\n                <Popup>A pretty CSS3 popup.<br />Easily customizable.</Popup>\n              </Marker>\n            </Map>\n          </Col>\n          <Col lg={4} style={{maxHeight: \"100vh\", overflow:\"scroll\"}}>\n            <h4>Filter Some Expocodes</h4>\n            <Form>\n              <Form.Control type=\"search\" onChange={this.handleSearch} value={this.state.searchText}/>\n            </Form>\n            <ul>\n              {results}\n            </ul>\n          </Col>\n        </Row>\n      </Container>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}